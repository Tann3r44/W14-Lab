#include <iostream>
#include <string>
using namespace std;

class InventoryNode {
private:
    string item;
    int numberOfItems;
    InventoryNode* nextNodeRef;

public:
    InventoryNode() {
        this->item = "";
        this->numberOfItems = 0;
        this->nextNodeRef = NULL;
    }

    InventoryNode(string itemInit, int numberOfItemsInit) {
        this->item = itemInit;
        this->numberOfItems = numberOfItemsInit;
        this->nextNodeRef = NULL;
    }

    InventoryNode(string itemInit, int numberOfItemsInit, InventoryNode nextLoc) {
        this->item = itemInit;
        this->numberOfItems = numberOfItemsInit;
        this->nextNodeRef = &nextLoc;
    }

    static InventoryNode* InsertAtFront(InventoryNode* headNode, InventoryNode* currNode)
    {
        currNode->nextNodeRef = headNode->nextNodeRef;
        headNode->nextNodeRef = currNode;

        return headNode;
    }

    InventoryNode* GetNext() {
        return this->nextNodeRef;
    }

    void PrintNodeData() {
        cout << this->numberOfItems << " " << this->item << endl;
    }
};


#include "InventoryNode.h"

int main() {
	int count;
	int numItems;
	string item;

	InventoryNode *headNode = new InventoryNode();
	InventoryNode *currNode;

	// Obtain number of items
	cin >> count;

	// Get each item and number of each
	for (int i = 0; i < count; i++) {
		cin >> item;
		cin >> numItems;
		currNode = new InventoryNode(item, numItems);
		currNode->InsertAtFront(headNode, currNode);
	}

	// Print linked list
	currNode = headNode->GetNext();
	while (currNode != NULL) {
		currNode->PrintNodeData();
		currNode = currNode->GetNext();
	}

	return 0;
}
